{"/home/travis/build/npmtest/node-npmtest-html-webpack-plugin/test.js":"/* istanbul instrument in package npmtest_html_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-html-webpack-plugin/lib.npmtest_html_webpack_plugin.js":"/* istanbul instrument in package npmtest_html_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_html_webpack_plugin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_html_webpack_plugin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-html-webpack-plugin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-html-webpack-plugin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_html_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_html_webpack_plugin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_html_webpack_plugin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_html_webpack_plugin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_html_webpack_plugin.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_html_webpack_plugin.__dirname +\n                    '/lib.npmtest_html_webpack_plugin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-html-webpack-plugin/html-webpack-plugin/index.js":"'use strict';\nvar vm = require('vm');\nvar fs = require('fs');\nvar _ = require('lodash');\nvar Promise = require('bluebird');\nvar path = require('path');\nvar childCompiler = require('./lib/compiler.js');\nvar prettyError = require('./lib/errors.js');\nvar chunkSorter = require('./lib/chunksorter.js');\nPromise.promisifyAll(fs);\n\nfunction HtmlWebpackPlugin (options) {\n  // Default options\n  this.options = _.extend({\n    template: path.join(__dirname, 'default_index.ejs'),\n    filename: 'index.html',\n    hash: false,\n    inject: true,\n    compile: true,\n    favicon: false,\n    minify: false,\n    cache: true,\n    showErrors: true,\n    chunks: 'all',\n    excludeChunks: [],\n    title: 'Webpack App',\n    xhtml: false\n  }, options);\n}\n\nHtmlWebpackPlugin.prototype.apply = function (compiler) {\n  var self = this;\n  var isCompilationCached = false;\n  var compilationPromise;\n\n  this.options.template = this.getFullTemplatePath(this.options.template, compiler.context);\n\n  // convert absolute filename into relative so that webpack can\n  // generate it at correct location\n  var filename = this.options.filename;\n  if (path.resolve(filename) === path.normalize(filename)) {\n    this.options.filename = path.relative(compiler.options.output.path, filename);\n  }\n\n  compiler.plugin('make', function (compilation, callback) {\n    // Compile the template (queued)\n    compilationPromise = childCompiler.compileTemplate(self.options.template, compiler.context, self.options.filename, compilation)\n      .catch(function (err) {\n        compilation.errors.push(prettyError(err, compiler.context).toString());\n        return {\n          content: self.options.showErrors ? prettyError(err, compiler.context).toJsonHtml() : 'ERROR',\n          outputName: self.options.filename\n        };\n      })\n      .then(function (compilationResult) {\n        // If the compilation change didnt change the cache is valid\n        isCompilationCached = compilationResult.hash && self.childCompilerHash === compilationResult.hash;\n        self.childCompilerHash = compilationResult.hash;\n        self.childCompilationOutputName = compilationResult.outputName;\n        callback();\n        return compilationResult.content;\n      });\n  });\n\n  compiler.plugin('emit', function (compilation, callback) {\n    var applyPluginsAsyncWaterfall = self.applyPluginsAsyncWaterfall(compilation);\n    // Get all chunks\n    var allChunks = compilation.getStats().toJson().chunks;\n    // Filter chunks (options.chunks and options.excludeCHunks)\n    var chunks = self.filterChunks(allChunks, self.options.chunks, self.options.excludeChunks);\n    // Sort chunks\n    chunks = self.sortChunks(chunks, self.options.chunksSortMode);\n    // Let plugins alter the chunks and the chunk sorting\n    chunks = compilation.applyPluginsWaterfall('html-webpack-plugin-alter-chunks', chunks, { plugin: self });\n    // Get assets\n    var assets = self.htmlWebpackPluginAssets(compilation, chunks);\n    // If this is a hot update compilation, move on!\n    // This solves a problem where an `index.html` file is generated for hot-update js files\n    // It only happens in Webpack 2, where hot updates are emitted separately before the full bundle\n    if (self.isHotUpdateCompilation(assets)) {\n      return callback();\n    }\n\n    // If the template and the assets did not change we don't have to emit the html\n    var assetJson = JSON.stringify(self.getAssetFiles(assets));\n    if (isCompilationCached && self.options.cache && assetJson === self.assetJson) {\n      return callback();\n    } else {\n      self.assetJson = assetJson;\n    }\n\n    Promise.resolve()\n      // Favicon\n      .then(function () {\n        if (self.options.favicon) {\n          return self.addFileToAssets(self.options.favicon, compilation)\n            .then(function (faviconBasename) {\n              var publicPath = compilation.mainTemplate.getPublicPath({hash: compilation.hash}) || '';\n              if (publicPath && publicPath.substr(-1) !== '/') {\n                publicPath += '/';\n              }\n              assets.favicon = publicPath + faviconBasename;\n            });\n        }\n      })\n      // Wait for the compilation to finish\n      .then(function () {\n        return compilationPromise;\n      })\n      .then(function (compiledTemplate) {\n        // Allow to use a custom function / string instead\n        if (self.options.templateContent !== undefined) {\n          return self.options.templateContent;\n        }\n        // Once everything is compiled evaluate the html factory\n        // and replace it with its content\n        return self.evaluateCompilationResult(compilation, compiledTemplate);\n      })\n      // Allow plugins to make changes to the assets before invoking the template\n      // This only makes sense to use if `inject` is `false`\n      .then(function (compilationResult) {\n        return applyPluginsAsyncWaterfall('html-webpack-plugin-before-html-generation', false, {\n          assets: assets,\n          outputName: self.childCompilationOutputName,\n          plugin: self\n        })\n        .then(function () {\n          return compilationResult;\n        });\n      })\n      // Execute the template\n      .then(function (compilationResult) {\n        // If the loader result is a function execute it to retrieve the html\n        // otherwise use the returned html\n        return typeof compilationResult !== 'function'\n          ? compilationResult\n          : self.executeTemplate(compilationResult, chunks, assets, compilation);\n      })\n      // Allow plugins to change the html before assets are injected\n      .then(function (html) {\n        var pluginArgs = {html: html, assets: assets, plugin: self, outputName: self.childCompilationOutputName};\n        return applyPluginsAsyncWaterfall('html-webpack-plugin-before-html-processing', true, pluginArgs);\n      })\n      .then(function (result) {\n        var html = result.html;\n        var assets = result.assets;\n        var chunks = result.chunks;\n        // Prepare script and link tags\n        var assetTags = self.generateAssetTags(assets);\n        var pluginArgs = {head: assetTags.head, body: assetTags.body, plugin: self, chunks: chunks, outputName: self.childCompilationOutputName};\n        // Allow plugins to change the assetTag definitions\n        return applyPluginsAsyncWaterfall('html-webpack-plugin-alter-asset-tags', true, pluginArgs)\n          .then(function (result) {\n              // Add the stylesheets, scripts and so on to the resulting html\n            return self.postProcessHtml(html, assets, { body: result.body, head: result.head })\n              .then(function (html) {\n                return _.extend(result, {html: html, assets: assets});\n              });\n          });\n      })\n      // Allow plugins to change the html after assets are injected\n      .then(function (result) {\n        var html = result.html;\n        var assets = result.assets;\n        var pluginArgs = {html: html, assets: assets, plugin: self, outputName: self.childCompilationOutputName};\n        return applyPluginsAsyncWaterfall('html-webpack-plugin-after-html-processing', true, pluginArgs)\n          .then(function (result) {\n            return result.html;\n          });\n      })\n      .catch(function (err) {\n        // In case anything went wrong the promise is resolved\n        // with the error message and an error is logged\n        compilation.errors.push(prettyError(err, compiler.context).toString());\n        // Prevent caching\n        self.hash = null;\n        return self.options.showErrors ? prettyError(err, compiler.context).toHtml() : 'ERROR';\n      })\n      .then(function (html) {\n        // Replace the compilation result with the evaluated html code\n        compilation.assets[self.childCompilationOutputName] = {\n          source: function () {\n            return html;\n          },\n          size: function () {\n            return html.length;\n          }\n        };\n      })\n      .then(function () {\n        // Let other plugins know that we are done:\n        return applyPluginsAsyncWaterfall('html-webpack-plugin-after-emit', false, {\n          html: compilation.assets[self.childCompilationOutputName],\n          outputName: self.childCompilationOutputName,\n          plugin: self\n        }).catch(function (err) {\n          console.error(err);\n          return null;\n        }).then(function () {\n          return null;\n        });\n      })\n      // Let webpack continue with it\n      .finally(function () {\n        callback();\n        // Tell blue bird that we don't want to wait for callback.\n        // Fixes \"Warning: a promise was created in a handler but none were returned from it\"\n        // https://github.com/petkaantonov/bluebird/blob/master/docs/docs/warning-explanations.md#warning-a-promise-was-created-in-a-handler-but-none-were-returned-from-it\n        return null;\n      });\n  });\n};\n\n/**\n * Evaluates the child compilation result\n * Returns a promise\n */\nHtmlWebpackPlugin.prototype.evaluateCompilationResult = function (compilation, source) {\n  if (!source) {\n    return Promise.reject('The child compilation didn\\'t provide a result');\n  }\n\n  // The LibraryTemplatePlugin stores the template result in a local variable.\n  // To extract the result during the evaluation this part has to be removed.\n  source = source.replace('var HTML_WEBPACK_PLUGIN_RESULT =', '');\n  var template = this.options.template.replace(/^.+!/, '').replace(/\\?.+$/, '');\n  var vmContext = vm.createContext(_.extend({HTML_WEBPACK_PLUGIN: true, require: require}, global));\n  var vmScript = new vm.Script(source, {filename: template});\n  // Evaluate code and cast to string\n  var newSource;\n  try {\n    newSource = vmScript.runInContext(vmContext);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n  if (typeof newSource === 'object' && newSource.__esModule && newSource.default) {\n    newSource = newSource.default;\n  }\n  return typeof newSource === 'string' || typeof newSource === 'function'\n    ? Promise.resolve(newSource)\n    : Promise.reject('The loader \"' + this.options.template + '\" didn\\'t return html.');\n};\n\n/**\n * Html post processing\n *\n * Returns a promise\n */\nHtmlWebpackPlugin.prototype.executeTemplate = function (templateFunction, chunks, assets, compilation) {\n  var self = this;\n  return Promise.resolve()\n    // Template processing\n    .then(function () {\n      var templateParams = {\n        compilation: compilation,\n        webpack: compilation.getStats().toJson(),\n        webpackConfig: compilation.options,\n        htmlWebpackPlugin: {\n          files: assets,\n          options: self.options\n        }\n      };\n      var html = '';\n      try {\n        html = templateFunction(templateParams);\n      } catch (e) {\n        compilation.errors.push(new Error('Template execution failed: ' + e));\n        return Promise.reject(e);\n      }\n      return html;\n    });\n};\n\n/**\n * Html post processing\n *\n * Returns a promise\n */\nHtmlWebpackPlugin.prototype.postProcessHtml = function (html, assets, assetTags) {\n  var self = this;\n  if (typeof html !== 'string') {\n    return Promise.reject('Expected html to be a string but got ' + JSON.stringify(html));\n  }\n  return Promise.resolve()\n    // Inject\n    .then(function () {\n      if (self.options.inject) {\n        return self.injectAssetsIntoHtml(html, assets, assetTags);\n      } else {\n        return html;\n      }\n    })\n    // Minify\n    .then(function (html) {\n      if (self.options.minify) {\n        var minify = require('html-minifier').minify;\n        return minify(html, self.options.minify);\n      }\n      return html;\n    });\n};\n\n/*\n * Pushes the content of the given filename to the compilation assets\n */\nHtmlWebpackPlugin.prototype.addFileToAssets = function (filename, compilation) {\n  filename = path.resolve(compilation.compiler.context, filename);\n  return Promise.props({\n    size: fs.statAsync(filename),\n    source: fs.readFileAsync(filename)\n  })\n  .catch(function () {\n    return Promise.reject(new Error('HtmlWebpackPlugin: could not load file ' + filename));\n  })\n  .then(function (results) {\n    var basename = path.basename(filename);\n    compilation.fileDependencies.push(filename);\n    compilation.assets[basename] = {\n      source: function () {\n        return results.source;\n      },\n      size: function () {\n        return results.size.size;\n      }\n    };\n    return basename;\n  });\n};\n\n/**\n * Helper to sort chunks\n */\nHtmlWebpackPlugin.prototype.sortChunks = function (chunks, sortMode) {\n  // Sort mode auto by default:\n  if (typeof sortMode === 'undefined') {\n    sortMode = 'auto';\n  }\n  // Custom function\n  if (typeof sortMode === 'function') {\n    return chunks.sort(sortMode);\n  }\n  // Disabled sorting:\n  if (sortMode === 'none') {\n    return chunkSorter.none(chunks);\n  }\n  // Check if the given sort mode is a valid chunkSorter sort mode\n  if (typeof chunkSorter[sortMode] !== 'undefined') {\n    return chunkSorter[sortMode](chunks);\n  }\n  throw new Error('\"' + sortMode + '\" is not a valid chunk sort mode');\n};\n\n/**\n * Return all chunks from the compilation result which match the exclude and include filters\n */\nHtmlWebpackPlugin.prototype.filterChunks = function (chunks, includedChunks, excludedChunks) {\n  return chunks.filter(function (chunk) {\n    var chunkName = chunk.names[0];\n    // This chunk doesn't have a name. This script can't handled it.\n    if (chunkName === undefined) {\n      return false;\n    }\n    // Skip if the chunk should be lazy loaded\n    if (!chunk.initial) {\n      return false;\n    }\n    // Skip if the chunks should be filtered and the given chunk was not added explicity\n    if (Array.isArray(includedChunks) && includedChunks.indexOf(chunkName) === -1) {\n      return false;\n    }\n    // Skip if the chunks should be filtered and the given chunk was excluded explicity\n    if (Array.isArray(excludedChunks) && excludedChunks.indexOf(chunkName) !== -1) {\n      return false;\n    }\n    // Add otherwise\n    return true;\n  });\n};\n\nHtmlWebpackPlugin.prototype.isHotUpdateCompilation = function (assets) {\n  return assets.js.length && assets.js.every(function (name) {\n    return /\\.hot-update\\.js$/.test(name);\n  });\n};\n\nHtmlWebpackPlugin.prototype.htmlWebpackPluginAssets = function (compilation, chunks) {\n  var self = this;\n  var webpackStatsJson = compilation.getStats().toJson();\n\n  // Use the configured public path or build a relative path\n  var publicPath = typeof compilation.options.output.publicPath !== 'undefined'\n    // If a hard coded public path exists use it\n    ? compilation.mainTemplate.getPublicPath({hash: webpackStatsJson.hash})\n    // If no public path was set get a relative url path\n    : path.relative(path.resolve(compilation.options.output.path, path.dirname(self.childCompilationOutputName)), compilation.options.output.path)\n      .split(path.sep).join('/');\n\n  if (publicPath.length && publicPath.substr(-1, 1) !== '/') {\n    publicPath += '/';\n  }\n\n  var assets = {\n    // The public path\n    publicPath: publicPath,\n    // Will contain all js & css files by chunk\n    chunks: {},\n    // Will contain all js files\n    js: [],\n    // Will contain all css files\n    css: [],\n    // Will contain the html5 appcache manifest files if it exists\n    manifest: Object.keys(compilation.assets).filter(function (assetFile) {\n      return path.extname(assetFile) === '.appcache';\n    })[0]\n  };\n\n  // Append a hash for cache busting\n  if (this.options.hash) {\n    assets.manifest = self.appendHash(assets.manifest, webpackStatsJson.hash);\n    assets.favicon = self.appendHash(assets.favicon, webpackStatsJson.hash);\n  }\n\n  for (var i = 0; i < chunks.length; i++) {\n    var chunk = chunks[i];\n    var chunkName = chunk.names[0];\n\n    assets.chunks[chunkName] = {};\n\n    // Prepend the public path to all chunk files\n    var chunkFiles = [].concat(chunk.files).map(function (chunkFile) {\n      return publicPath + chunkFile;\n    });\n\n    // Append a hash for cache busting\n    if (this.options.hash) {\n      chunkFiles = chunkFiles.map(function (chunkFile) {\n        return self.appendHash(chunkFile, webpackStatsJson.hash);\n      });\n    }\n\n    // Webpack outputs an array for each chunk when using sourcemaps\n    // But we need only the entry file\n    var entry = chunkFiles[0];\n    assets.chunks[chunkName].size = chunk.size;\n    assets.chunks[chunkName].entry = entry;\n    assets.chunks[chunkName].hash = chunk.hash;\n    assets.js.push(entry);\n\n    // Gather all css files\n    var css = chunkFiles.filter(function (chunkFile) {\n      // Some chunks may contain content hash in their names, for ex. 'main.css?1e7cac4e4d8b52fd5ccd2541146ef03f'.\n      // We must proper handle such cases, so we use regexp testing here\n      return /.css($|\\?)/.test(chunkFile);\n    });\n    assets.chunks[chunkName].css = css;\n    assets.css = assets.css.concat(css);\n  }\n\n  // Duplicate css assets can occur on occasion if more than one chunk\n  // requires the same css.\n  assets.css = _.uniq(assets.css);\n\n  return assets;\n};\n\n/**\n * Injects the assets into the given html string\n */\nHtmlWebpackPlugin.prototype.generateAssetTags = function (assets) {\n  // Turn script files into script tags\n  var scripts = assets.js.map(function (scriptPath) {\n    return {\n      tagName: 'script',\n      closeTag: true,\n      attributes: {\n        type: 'text/javascript',\n        src: scriptPath\n      }\n    };\n  });\n  // Make tags self-closing in case of xhtml\n  var selfClosingTag = !!this.options.xhtml;\n  // Turn css files into link tags\n  var styles = assets.css.map(function (stylePath) {\n    return {\n      tagName: 'link',\n      selfClosingTag: selfClosingTag,\n      attributes: {\n        href: stylePath,\n        rel: 'stylesheet'\n      }\n    };\n  });\n  // Injection targets\n  var head = [];\n  var body = [];\n\n  // If there is a favicon present, add it to the head\n  if (assets.favicon) {\n    head.push({\n      tagName: 'link',\n      selfClosingTag: selfClosingTag,\n      attributes: {\n        rel: 'shortcut icon',\n        href: assets.favicon\n      }\n    });\n  }\n  // Add styles to the head\n  head = head.concat(styles);\n  // Add scripts to body or head\n  if (this.options.inject === 'head') {\n    head = head.concat(scripts);\n  } else {\n    body = body.concat(scripts);\n  }\n  return {head: head, body: body};\n};\n\n/**\n * Injects the assets into the given html string\n */\nHtmlWebpackPlugin.prototype.injectAssetsIntoHtml = function (html, assets, assetTags) {\n  var htmlRegExp = /(<html[^>]*>)/i;\n  var headRegExp = /(<\\/head>)/i;\n  var bodyRegExp = /(<\\/body>)/i;\n  var body = assetTags.body.map(this.createHtmlTag);\n  var head = assetTags.head.map(this.createHtmlTag);\n\n  if (body.length) {\n    if (bodyRegExp.test(html)) {\n      // Append assets to body element\n      html = html.replace(bodyRegExp, function (match) {\n        return body.join('') + match;\n      });\n    } else {\n      // Append scripts to the end of the file if no <body> element exists:\n      html += body.join('');\n    }\n  }\n\n  if (head.length) {\n    // Create a head tag if none exists\n    if (!headRegExp.test(html)) {\n      if (!htmlRegExp.test(html)) {\n        html = '<head></head>' + html;\n      } else {\n        html = html.replace(htmlRegExp, function (match) {\n          return match + '<head></head>';\n        });\n      }\n    }\n\n    // Append assets to head element\n    html = html.replace(headRegExp, function (match) {\n      return head.join('') + match;\n    });\n  }\n\n  // Inject manifest into the opening html tag\n  if (assets.manifest) {\n    html = html.replace(/(<html[^>]*)(>)/i, function (match, start, end) {\n      // Append the manifest only if no manifest was specified\n      if (/\\smanifest\\s*=/.test(match)) {\n        return match;\n      }\n      return start + ' manifest=\"' + assets.manifest + '\"' + end;\n    });\n  }\n  return html;\n};\n\n/**\n * Appends a cache busting hash\n */\nHtmlWebpackPlugin.prototype.appendHash = function (url, hash) {\n  if (!url) {\n    return url;\n  }\n  return url + (url.indexOf('?') === -1 ? '?' : '&') + hash;\n};\n\n/**\n * Turn a tag definition into a html string\n */\nHtmlWebpackPlugin.prototype.createHtmlTag = function (tagDefinition) {\n  var attributes = Object.keys(tagDefinition.attributes || {})\n    .filter(function (attributeName) {\n      return tagDefinition.attributes[attributeName] !== false;\n    })\n    .map(function (attributeName) {\n      if (tagDefinition.attributes[attributeName] === true) {\n        return attributeName;\n      }\n      return attributeName + '=\"' + tagDefinition.attributes[attributeName] + '\"';\n    });\n  // Backport of 3.x void tag definition\n  var voidTag = tagDefinition.voidTag !== undefined ? tagDefinition.voidTag : !tagDefinition.closeTag;\n  var selfClosingTag = tagDefinition.voidTag !== undefined ? tagDefinition.voidTag && this.options.xhtml : tagDefinition.selfClosingTag;\n  return '<' + [tagDefinition.tagName].concat(attributes).join(' ') + (selfClosingTag ? '/' : '') + '>' +\n    (tagDefinition.innerHTML || '') +\n    (voidTag ? '' : '</' + tagDefinition.tagName + '>');\n};\n\n/**\n * Helper to return the absolute template path with a fallback loader\n */\nHtmlWebpackPlugin.prototype.getFullTemplatePath = function (template, context) {\n  // If the template doesn't use a loader use the lodash template loader\n  if (template.indexOf('!') === -1) {\n    template = require.resolve('./lib/loader.js') + '!' + path.resolve(context, template);\n  }\n  // Resolve template path\n  return template.replace(\n    /([!])([^/\\\\][^!?]+|[^/\\\\!?])($|\\?[^!?\\n]+$)/,\n    function (match, prefix, filepath, postfix) {\n      return prefix + path.resolve(filepath) + postfix;\n    });\n};\n\n/**\n * Helper to return a sorted unique array of all asset files out of the\n * asset object\n */\nHtmlWebpackPlugin.prototype.getAssetFiles = function (assets) {\n  var files = _.uniq(Object.keys(assets).filter(function (assetType) {\n    return assetType !== 'chunks' && assets[assetType];\n  }).reduce(function (files, assetType) {\n    return files.concat(assets[assetType]);\n  }, []));\n  files.sort();\n  return files;\n};\n\n/**\n * Helper to promisify compilation.applyPluginsAsyncWaterfall that returns\n * a function that helps to merge given plugin arguments with processed ones\n */\nHtmlWebpackPlugin.prototype.applyPluginsAsyncWaterfall = function (compilation) {\n  var promisedApplyPluginsAsyncWaterfall = Promise.promisify(compilation.applyPluginsAsyncWaterfall, {context: compilation});\n  return function (eventName, requiresResult, pluginArgs) {\n    return promisedApplyPluginsAsyncWaterfall(eventName, pluginArgs)\n      .then(function (result) {\n        if (requiresResult && !result) {\n          compilation.warnings.push(new Error('Using ' + eventName + ' without returning a result is deprecated.'));\n        }\n        return _.extend(pluginArgs, result);\n      });\n  };\n};\n\nmodule.exports = HtmlWebpackPlugin;\n","/home/travis/build/npmtest/node-npmtest-html-webpack-plugin/html-webpack-plugin/lib/compiler.js":"/*\n * This file uses webpack to compile a template with a child compiler.\n *\n * [TEMPLATE] -> [JAVASCRIPT]\n *\n */\n'use strict';\nvar Promise = require('bluebird');\nvar _ = require('lodash');\nvar path = require('path');\nvar NodeTemplatePlugin = require('webpack/lib/node/NodeTemplatePlugin');\nvar NodeTargetPlugin = require('webpack/lib/node/NodeTargetPlugin');\nvar LoaderTargetPlugin = require('webpack/lib/LoaderTargetPlugin');\nvar LibraryTemplatePlugin = require('webpack/lib/LibraryTemplatePlugin');\nvar SingleEntryPlugin = require('webpack/lib/SingleEntryPlugin');\n\n/**\n * Compiles the template into a nodejs factory, adds its to the compilation.assets\n * and returns a promise of the result asset object.\n *\n * @param template relative path to the template file\n * @param context path context\n * @param outputFilename the file name\n * @param compilation The webpack compilation object\n *\n * Returns an object:\n * {\n *  hash: {String} - Base64 hash of the file\n *  content: {String} - Javascript executable code of the template\n * }\n *\n */\nmodule.exports.compileTemplate = function compileTemplate (template, context, outputFilename, compilation) {\n  // The entry file is just an empty helper as the dynamic template\n  // require is added in \"loader.js\"\n  var outputOptions = {\n    filename: outputFilename,\n    publicPath: compilation.outputOptions.publicPath\n  };\n  // Store the result of the parent compilation before we start the child compilation\n  var assetsBeforeCompilation = _.assign({}, compilation.assets[outputOptions.filename]);\n  // Create an additional child compiler which takes the template\n  // and turns it into an Node.JS html factory.\n  // This allows us to use loaders during the compilation\n  var compilerName = getCompilerName(context, outputFilename);\n  var childCompiler = compilation.createChildCompiler(compilerName, outputOptions);\n  childCompiler.context = context;\n  childCompiler.apply(\n    new NodeTemplatePlugin(outputOptions),\n    new NodeTargetPlugin(),\n    new LibraryTemplatePlugin('HTML_WEBPACK_PLUGIN_RESULT', 'var'),\n    new SingleEntryPlugin(this.context, template),\n    new LoaderTargetPlugin('node')\n  );\n\n  // Fix for \"Uncaught TypeError: __webpack_require__(...) is not a function\"\n  // Hot module replacement requires that every child compiler has its own\n  // cache. @see https://github.com/ampedandwired/html-webpack-plugin/pull/179\n  childCompiler.plugin('compilation', function (compilation) {\n    if (compilation.cache) {\n      if (!compilation.cache[compilerName]) {\n        compilation.cache[compilerName] = {};\n      }\n      compilation.cache = compilation.cache[compilerName];\n    }\n  });\n\n  // Compile and return a promise\n  return new Promise(function (resolve, reject) {\n    childCompiler.runAsChild(function (err, entries, childCompilation) {\n      // Resolve / reject the promise\n      if (childCompilation && childCompilation.errors && childCompilation.errors.length) {\n        var errorDetails = childCompilation.errors.map(function (error) {\n          return error.message + (error.error ? ':\\n' + error.error : '');\n        }).join('\\n');\n        reject(new Error('Child compilation failed:\\n' + errorDetails));\n      } else if (err) {\n        reject(err);\n      } else {\n        // Replace [hash] placeholders in filename\n        var outputName = compilation.mainTemplate.applyPluginsWaterfall('asset-path', outputOptions.filename, {\n          hash: childCompilation.hash,\n          chunk: entries[0]\n        });\n        // Restore the parent compilation to the state like it\n        // was before the child compilation\n        compilation.assets[outputName] = assetsBeforeCompilation[outputName];\n        if (assetsBeforeCompilation[outputName] === undefined) {\n          // If it wasn't there - delete it\n          delete compilation.assets[outputName];\n        }\n        resolve({\n          // Hash of the template entry point\n          hash: entries[0].hash,\n          // Output name\n          outputName: outputName,\n          // Compiled code\n          content: childCompilation.assets[outputName].source()\n        });\n      }\n    });\n  });\n};\n\n/**\n * Returns the child compiler name e.g. 'html-webpack-plugin for \"index.html\"'\n */\nfunction getCompilerName (context, filename) {\n  var absolutePath = path.resolve(context, filename);\n  var relativePath = path.relative(context, absolutePath);\n  return 'html-webpack-plugin for \"' + (absolutePath.length < relativePath.length ? absolutePath : relativePath) + '\"';\n}\n","/home/travis/build/npmtest/node-npmtest-html-webpack-plugin/html-webpack-plugin/lib/errors.js":"'use strict';\nvar PrettyError = require('pretty-error');\nvar prettyError = new PrettyError();\nprettyError.withoutColors();\nprettyError.skipPackage(['html-plugin-evaluation']);\nprettyError.skipNodeFiles();\nprettyError.skip(function (traceLine) {\n  return traceLine.path === 'html-plugin-evaluation';\n});\n\nmodule.exports = function (err, context) {\n  return {\n    toHtml: function () {\n      return 'Html Webpack Plugin:\\n<pre>\\n' + this.toString() + '</pre>';\n    },\n    toJsonHtml: function () {\n      return JSON.stringify(this.toHtml());\n    },\n    toString: function () {\n      return prettyError.render(err).replace(/webpack:\\/\\/\\/\\./g, context);\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-html-webpack-plugin/html-webpack-plugin/lib/chunksorter.js":"'use strict';\n\nvar toposort = require('toposort');\nvar _ = require('lodash');\n\n/*\n  Sorts dependencies between chunks by their \"parents\" attribute.\n\n  This function sorts chunks based on their dependencies with each other.\n  The parent relation between chunks as generated by Webpack for each chunk\n  is used to define a directed (and hopefully acyclic) graph, which is then\n  topologically sorted in order to retrieve the correct order in which\n  chunks need to be embedded into HTML. A directed edge in this graph is\n  describing a \"is parent of\" relationship from a chunk to another (distinct)\n  chunk. Thus topological sorting orders chunks from bottom-layer chunks to\n  highest level chunks that use the lower-level chunks.\n\n  @param {Array} chunks an array of chunks as generated by the html-webpack-plugin.\n  It is assumed that each entry contains at least the properties \"id\"\n  (containing the chunk id) and \"parents\" (array containing the ids of the\n  parent chunks).\n\n  @return {Array} A topologically sorted version of the input chunks\n*/\nmodule.exports.dependency = function (chunks) {\n  if (!chunks) {\n    return chunks;\n  }\n\n  // We build a map (chunk-id -> chunk) for faster access during graph building.\n  var nodeMap = {};\n\n  chunks.forEach(function (chunk) {\n    nodeMap[chunk.id] = chunk;\n  });\n\n  // Next, we add an edge for each parent relationship into the graph\n  var edges = [];\n\n  chunks.forEach(function (chunk) {\n    if (chunk.parents) {\n      // Add an edge for each parent (parent -> child)\n      chunk.parents.forEach(function (parentId) {\n        // webpack2 chunk.parents are chunks instead of string id(s)\n        var parentChunk = _.isObject(parentId) ? parentId : nodeMap[parentId];\n        // If the parent chunk does not exist (e.g. because of an excluded chunk)\n        // we ignore that parent\n        if (parentChunk) {\n          edges.push([parentChunk, chunk]);\n        }\n      });\n    }\n  });\n  // We now perform a topological sorting on the input chunks and built edges\n  return toposort.array(chunks, edges);\n};\n\n/**\n * Sorts the chunks based on the chunk id.\n *\n * @param  {Array} chunks the list of chunks to sort\n * @return {Array} The sorted list of chunks\n */\nmodule.exports.id = function (chunks) {\n  return chunks.sort(function orderEntryLast (a, b) {\n    if (a.entry !== b.entry) {\n      return b.entry ? 1 : -1;\n    } else {\n      return b.id - a.id;\n    }\n  });\n};\n\n/**\n * Performs identity mapping (no-sort).\n * @param  {Array} chunks the chunks to sort\n * @return {Array} The sorted chunks\n */\nmodule.exports.none = function (chunks) {\n  return chunks;\n};\n\n/**\n * Defines the default sorter.\n */\nmodule.exports.auto = module.exports.id;\n\n// In webpack 2 the ids have been flipped.\n// Therefore the id sort doesn't work the same way as it did for webpack 1\n// Luckily the dependency sort is working as expected\nif (require('webpack/package.json').version.split('.')[0] === '2') {\n  module.exports.auto = module.exports.dependency;\n}\n"}